RM := rm -rf
TOOLCHAIN_NAME = riscv64-unknown-elf

WORK_DIR = out
LD_SCRIPT = ../riscv_soc.ld
#DEV_ARCH = rv32i_zicsr
DEV_ARCH = rv32i_c_zicsr

AS = $(TOOLCHAIN_NAME)-as
GCC = $(TOOLCHAIN_NAME)-gcc
GXX = $(TOOLCHAIN_NAME)-g++
SIZE = $(TOOLCHAIN_NAME)-size
OBJDUMP = $(TOOLCHAIN_NAME)-objdump
OBJCOPY = $(TOOLCHAIN_NAME)-objcopy

CC = echo
LD = echo

EXECUTABLE = $(WORK_DIR)/$(PROJ_NAME).elf
LIST_FILE = $(WORK_DIR)/$(PROJ_NAME).list
BIN_FILE = $(WORK_DIR)/$(PROJ_NAME).bin
HEX_FILE = $(WORK_DIR)/$(PROJ_NAME).hex
MAP_FILE = $(WORK_DIR)/$(PROJ_NAME).map
VH_FILE = $(WORK_DIR)/$(PROJ_NAME).vh
MIF_FILE = $(WORK_DIR)/$(PROJ_NAME).mif

ARCH_FLAGS_ALL = -march=$(DEV_ARCH) -mabi=ilp32
ARCH_FLAGS = $(ARCH_FLAGS_ALL) -specs=nosys.specs
WARN_FLAGS = -Wall -Wextra -Wfatal-errors -Wno-unknown-pragmas
ifneq ($(debug),)
	DEBUG_FLAGS = -g3 -DDEBUG
endif
OPTIMIZE_FLAGS = -O3 -ffunction-sections -fdata-sections -fearly-inlining -finline-small-functions
ifneq ($(lto),)
	OPTIMIZE_FLAGS += -flto
endif
C_FLAGS += $(ARCH_FLAGS) -fno-exceptions -fstack-usage -MMD -MP $(OPTIMIZE_FLAGS) $(WARN_FLAGS) $(DEBUG_FLAGS)
C_FLAGS += -Wno-strict-aliasing
ifneq ($(sim),)
	C_FLAGS += -DSIM
endif
CPP_FLAGS := $(C_FLAGS) -std=gnu++1z -fno-rtti -fno-threadsafe-statics -fno-use-cxa-atexit
LD_FLAGS += $(ARCH_FLAGS) -march=rv32i -T"$(LD_SCRIPT)" -Wl,-Map="$(MAP_FILE)"
LD_FLAGS += -Wl,--no-warn-rwx-segment -Wl,--gc-sections -nodefaultlibs -nostartfiles -static
LIBS = -Wl,--start-group -lc -lm -lgcc -lstdc++ -lsupc++ -lnosys -Wl,--end-group

CFLAGS = $(C_FLAGS)
LFLAGS = $(LD_FLAGS)

PROJ_DIR := $(shell pwd)

INC = . ../common/

OBJECTS := $(patsubst %, $(WORK_DIR)/%, $(OBJS))
INC_DIR := $(patsubst %, -I%, $(INC))
vpath %.c $(INC)
vpath %.cpp $(INC)
vpath %.hpp $(INC)
vpath %.S $(INC)

INC_DIR := $(sort $(INC_DIR))

DEPFILES := $(OBJECTS:%.o=%.d)

.SUFFIXES: .cpp .c .o .S

# All Target
all: secondary-outputs

$(WORK_DIR)/%.o: %.S $(WORK_DIR)
	$(info AS $<)
	$(GCC) -c $(ARCH_FLAGS_ALL) -o $@ $<
#	@$(AS) $(ARCH_FLAGS_ALL) "$<" -o "$@"

$(WORK_DIR)/%.o: %.c $(WORK_DIR)
	$(info CC $<)
	$(GCC) $(C_FLAGS) $(INC_DIR) -MF "$(WORK_DIR)/$*.d" -c "$<" -o "$@"

$(WORK_DIR)/%.o: %.cpp
	$(info CX $<)
	$(GXX) $(CPP_FLAGS) $(INC_DIR) -MF "$(WORK_DIR)/$*.d" -c "$<" -o "$@"

%.elf: $(WORK_DIR) $(OBJECTS)
	$(info LD $@)
	$(GCC) -o "$@" $(LD_FLAGS) $(OBJECTS) $(LIBS)

size.stdout: $(EXECUTABLE)
	$(SIZE)  $(EXECUTABLE)

$(LIST_FILE): $(EXECUTABLE)
	$(info LST $@)
	$(OBJDUMP) -hSCl --inlines $(EXECUTABLE) > "$(LIST_FILE)"

$(BIN_FILE): $(EXECUTABLE)
	$(info BIN $@)
	$(OBJCOPY) -O binary $(EXECUTABLE) "$(BIN_FILE)"
	$(info HEX $@)
	$(OBJCOPY) -O ihex $(EXECUTABLE) "$(HEX_FILE)"

$(VH_FILE): $(BIN_FILE)
	$(info VH $@)
	$(OBJCOPY) --verilog-data-width=4 --reverse-bytes=4 -I binary -O verilog $(BIN_FILE) $(VH_FILE)
	cp $(VH_FILE) ../../sim/run/fw.vh

$(MIF_FILE): $(BIN_FILE)
	$(info MIF $@)
	./mem_init_gen.py -i -of MIF --width 4 $(BIN_FILE) > $(MIF_FILE)

secondary-outputs: size.stdout $(LIST_FILE) $(VH_FILE)

.PHONY: all clean
.SECONDARY:

%.d: ;

include $(DEPFILES)

$(V).SILENT:

